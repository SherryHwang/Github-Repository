C51 COMPILER V9.56.0.0   ADXL345                                                           08/10/2018 20:37:18 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE ADXL345
OBJECT MODULE PLACED IN .\Objects\ADXL345.obj
COMPILER INVOKED BY: D:\Software\C51\C51\BIN\C51.EXE ADXL345\ADXL345.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\IIC;.\LCD1602;.
                    -\DELAY;.\PCF8591;.\SENSOR;.\USER;.\7SEG;.\WIFI;.\DEFINE;.\DS18B20;.\ELECTRONIC_SCALE;..\MCU_TEST;.\LATTICE;.\ADXL345;.\B
                    -H1750) DEBUG OBJECTEXTEND PRINT(.\Listings\ADXL345.lst) TABS(2) OBJECT(.\Objects\ADXL345.obj)

line level    source

   1          #include "ADXL345.h"
   2          #include "IIC.h"
   3          #include "Delay.h"
   4          #include "LCD1602.h"
   5          uchar BUF[8];                         //接收数据缓存区   
   6          void ADXL345_Write_Single(uchar REG_Address,uchar REG_data)  //单字节写入
   7          {
   8   1        Start_I2c();  //开启I2C数据传输
   9   1        SendByte(0xA6); //发送设备地址+写信号,确定I2C上的设备
  10   1        SendByte(REG_Address);  //内部寄存器地址，请参考中文pdf22页 
  11   1        SendByte(REG_data);     //内部寄存器数据，请参考中文pdf22页 
  12   1        Stop_I2c();  //停止I2C数据传输
  13   1      }
  14          void ADXL345_Init()                                         //初始化ADXL345
  15          {
  16   1        ADXL345_Write_Single(0x31,0x0B);   //测量范围,正负16g，13位模式
  17   1        ADXL345_Write_Single(0x2C,0x08);   //速率设定为12.5 参考pdf13页
  18   1        ADXL345_Write_Single(0x2D,0x08);   //选择电源模式   参考pdf24页
  19   1        ADXL345_Write_Single(0x2E,0x80);   //使能 DATA_READY 中断
  20   1        ADXL345_Write_Single(0x1E,0x00);   //X 偏移量 根据测试传感器的状态写入pdf29页
  21   1        ADXL345_Write_Single(0x1F,0x00);   //Y 偏移量 根据测试传感器的状态写入pdf29页
  22   1        ADXL345_Write_Single(0x20,0x05);   //Z 偏移量 根据测试传感器的状态写入pdf29页
  23   1      }
  24          
  25          void ADXL345_Read_Multiple(void)                    //连续的读取内部寄存器数据
  26          {   
  27   1        uchar i;
  28   1        Start_I2c();                          //起始信号
  29   1        SendByte(0xA6);                       //发送设备地址+写信号
  30   1        SendByte(0x32);                       //发送存储单元地址，从0x32开始  
  31   1        Start_I2c();                          //起始信号
  32   1        SendByte(0xA7);                       //发送设备地址+读信号
  33   1        for(i=0; i<6; i++)                    //连续读取6个地址数据，存储在中BUF
  34   1        {
  35   2            BUF[i] = RcvByte();               //BUF[0]存储0x32地址中的数据
  36   2            if(i == 5)
  37   2            {
  38   3               Ack_I2c(1);                    //最后一个数据需要回NOACK
  39   3            }
  40   2            else
  41   2            {
  42   3               Ack_I2c(0);                      //回应ACK
  43   3            }
  44   2        }
  45   1        Stop_I2c();                           //停止信号
  46   1        Delay_ms(5);
  47   1        BUF[6] = '\0';                        //字符串结尾标志
  48   1      }
  49          void ADXL345_Display_x(int x)
  50          {
  51   1        if(x<0)
  52   1        {
  53   2          x = -x;
C51 COMPILER V9.56.0.0   ADXL345                                                           08/10/2018 20:37:18 PAGE 2   

  54   2          lcd1602_write_char(10,0,'-');      //显示正负符号位
  55   2        }
  56   1        else
  57   1          lcd1602_write_char(10,0,' '); //显示空格
  58   1        
  59   1        x = (float)x * 3.9;
  60   1        lcd1602_write_char(8,0,'X');
  61   1        lcd1602_write_char(9,0,':'); 
  62   1        x = x%10000;   //取余运算
  63   1        lcd1602_write_char(11,0,x/1000+'0'); 
  64   1        lcd1602_write_char(12,0,'.'); 
  65   1        x = x%1000;    //取余运算
  66   1        lcd1602_write_char(13,0,x/100+'0'); 
  67   1        x = x%100;     //取余运算
  68   1        lcd1602_write_char(14,0,x/10+'0'); 
  69   1        lcd1602_write_char(15,0,' '); 
  70   1      }
  71          void ADXL345_Display_y(int y)
  72          {
  73   1        if(y<0)
  74   1        {
  75   2          y=-y;
  76   2          lcd1602_write_char(2,1,'-');      //显示正负符号位
  77   2        }
  78   1        else 
  79   1          lcd1602_write_char(2,1,' '); //显示空格
  80   1        
  81   1        y = (float)y * 3.9;
  82   1        lcd1602_write_char(0,1,'Y');   //第1行，第0列 显示y
  83   1        lcd1602_write_char(1,1,':'); 
  84   1        y = y%10000;   //取余运算
  85   1        lcd1602_write_char(3,1,y/1000+'0'); 
  86   1        lcd1602_write_char(4,1,'.'); 
  87   1        y = y%1000;    //取余运算
  88   1        lcd1602_write_char(5,1,y/100+'0'); 
  89   1        y = y%100;     //取余运算
  90   1        lcd1602_write_char(6,1,y/10+'0');  
  91   1        lcd1602_write_char(7,1,' '); 
  92   1      }
  93          void ADXL345_Display_z(int z)
  94          {
  95   1        if(z<0)
  96   1        {
  97   2          z=-z;
  98   2          lcd1602_write_char(10,1,'-');       //显示负符号位
  99   2        }
 100   1        else 
 101   1          lcd1602_write_char(10,1,' ');  //显示空格
 102   1        
 103   1        z = (float)z * 3.9;
 104   1        lcd1602_write_char(8,1,'Z');  //第0行，第10列 显示Z
 105   1        lcd1602_write_char(9,1,':');
 106   1        z = z%10000;     //取余运算
 107   1        lcd1602_write_char(11,1,z/1000+'0'); 
 108   1        lcd1602_write_char(12,1,'.'); 
 109   1        z = z%1000;     //取余运算
 110   1        lcd1602_write_char(13,1,z/100+'0'); 
 111   1        z = z%100;     //取余运算
 112   1        lcd1602_write_char(14,1,z/10+'0'); 
 113   1        lcd1602_write_char(15,1,' ');  
 114   1      }
 115          void ADXL345_Display_xyz()          //显示ADXL345测量数据
C51 COMPILER V9.56.0.0   ADXL345                                                           08/10/2018 20:37:18 PAGE 3   

 116          {
 117   1        ADXL345_Display_x((BUF[1]<<8)+BUF[0]);
 118   1        
 119   1        ADXL345_Display_y((BUF[3]<<8)+BUF[2]);
 120   1      
 121   1        ADXL345_Display_z((BUF[5]<<8)+BUF[4]);
 122   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    820    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      8       9
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
